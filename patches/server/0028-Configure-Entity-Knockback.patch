From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Wed, 15 Nov 2023 20:52:56 +0000
Subject: [PATCH] Configure Entity Knockback


diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index fe6fa875258ba64cf4ad90813c8b7c39c0af7245..b4567ecd8e18e1afd8c4df99c2e521a5f40e0919 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -1463,7 +1463,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                         d0 = (Math.random() - Math.random()) * 0.01D;
                     }
 
-                    this.knockback(0.4000000059604645D, d0, d1, entity1); // Paper
+                    this.knockback((float) level.sakuraConfig().players.knockback.knockbackHorizontal, d0, d1, entity1); // Sakura // Paper
                     if (!flag) {
                         this.indicateDamage(d0, d1);
                     }
@@ -1511,7 +1511,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     protected void blockedByShield(LivingEntity target) {
-        target.knockback(0.5D, target.getX() - this.getX(), target.getZ() - this.getZ(), this); // Paper
+        target.knockback((float) level.sakuraConfig().players.knockback.shieldHitKnockback, target.getX() - this.getX(), target.getZ() - this.getZ(), this); // Sakura - configurable knockback // Paper
     }
 
     private boolean checkTotemDeathProtection(DamageSource source) {
@@ -1823,13 +1823,24 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
     public void knockback(double strength, double x, double z, Entity knockingBackEntity) {
         // Paper end - add knockbacking entity parameter
-        strength *= 1.0D - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
+        strength *= 1.0D - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE) * level.sakuraConfig().players.knockback.knockbackResistanceModifier; // Sakura
         if (strength > 0.0D) {
             this.hasImpulse = true;
             Vec3 vec3d = this.getDeltaMovement();
             Vec3 vec3d1 = (new Vec3(x, 0.0D, z)).normalize().scale(strength);
 
             this.setDeltaMovement(vec3d.x / 2.0D - vec3d1.x, this.onGround ? Math.min(0.4D, vec3d.y / 2.0D + strength) : vec3d.y, vec3d.z / 2.0D - vec3d1.z);
+            // Sakura start - configure knockback
+            double velocityX = vec3d.x / 2.0D - vec3d1.x;
+            double velocityY = vec3d.y / 2.0D + (float) level.sakuraConfig().players.knockback.knockbackVertical;
+            double velocityZ = vec3d.z / 2.0D - vec3d1.z;
+
+            if (!level.sakuraConfig().players.knockback.verticalLimitRequireGround || this.onGround) {
+                velocityY = Math.min(velocityY, (float) level.sakuraConfig().players.knockback.knockbackVerticalLimit);
+            }
+
+            this.setDeltaMovement(velocityX, velocityY, velocityZ);
+            // Sakura end
             // Paper start - call EntityKnockbackByEntityEvent
             Vec3 currentMovement = this.getDeltaMovement();
             org.bukkit.util.Vector delta = new org.bukkit.util.Vector(currentMovement.x - vec3d.x, currentMovement.y - vec3d.y, currentMovement.z - vec3d.z);
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index c125c963c1f0266fccf7a83ccd01641d5ea2a980..95b1e0c116fc070fe8c692f8c1aff63bd1825d99 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -186,6 +186,7 @@ public abstract class Player extends LivingEntity {
     public boolean affectsSpawning = true;
     public net.kyori.adventure.util.TriState flyingFallDamage = net.kyori.adventure.util.TriState.NOT_SET;
     // Paper end
+    private long lastSprintKnockback = -1; // Sakura
 
     // CraftBukkit start
     public boolean fauxSleeping;
@@ -1270,7 +1271,7 @@ public abstract class Player extends LivingEntity {
                     byte b0 = 0;
                     int i = b0 + EnchantmentHelper.getKnockbackBonus(this);
 
-                    if (this.isSprinting() && flag) {
+                    if (this.isSprinting() && (!level.sakuraConfig().players.knockback.sprinting.requireFullAttack || flag)) { // Sakura
                         sendSoundEffect(this, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_KNOCKBACK, this.getSoundSource(), 1.0F, 1.0F); // Paper - send while respecting visibility
                         ++i;
                         flag1 = true;
@@ -1320,10 +1321,20 @@ public abstract class Player extends LivingEntity {
 
                     if (flag5) {
                         if (i > 0) {
+                            // Sakura start - configure extra sprinting knockback
+                            float extraKnockback = (float) i * 0.5F;
+                            long millis = System.currentTimeMillis();
+                            long sinceLastKnockback = millis - lastSprintKnockback;
+
+                            if (flag1 && sinceLastKnockback >= level.sakuraConfig().players.knockback.sprinting.knockbackDelay.value().orElse(0)) {
+                                extraKnockback += -0.5F + (float) level.sakuraConfig().players.knockback.sprinting.extraKnockback;
+                                lastSprintKnockback = millis;
+                            }
                             if (target instanceof LivingEntity) {
-                                ((LivingEntity) target).knockback((double) ((float) i * 0.5F), (double) Mth.sin(this.getYRot() * 0.017453292F), (double) (-Mth.cos(this.getYRot() * 0.017453292F)), this); // Paper
+                                ((LivingEntity) target).knockback((double) (extraKnockback), (double) Mth.sin(this.getYRot() * 0.017453292F), (double) (-Mth.cos(this.getYRot() * 0.017453292F)), this); // Paper
                             } else {
-                                target.push((double) (-Mth.sin(this.getYRot() * 0.017453292F) * (float) i * 0.5F), 0.1D, (double) (Mth.cos(this.getYRot() * 0.017453292F) * (float) i * 0.5F), this); // Paper
+                                target.push((double) (-Mth.sin(this.getYRot() * 0.017453292F) * extraKnockback), 0.1D, (double) (Mth.cos(this.getYRot() * 0.017453292F) * extraKnockback), this); // Paper
+                                // Sakura end
                             }
 
                             this.setDeltaMovement(this.getDeltaMovement().multiply(0.6D, 1.0D, 0.6D));
@@ -1345,7 +1356,7 @@ public abstract class Player extends LivingEntity {
                                 if (entityliving != this && entityliving != target && !this.isAlliedTo((Entity) entityliving) && (!(entityliving instanceof ArmorStand) || !((ArmorStand) entityliving).isMarker()) && this.distanceToSqr((Entity) entityliving) < 9.0D) {
                                     // CraftBukkit start - Only apply knockback if the damage hits
                                     if (entityliving.hurt(this.damageSources().playerAttack(this).sweep().critical(flag2), f4)) { // Paper - add critical damage API
-                                    entityliving.knockback(0.4000000059604645D, (double) Mth.sin(this.getYRot() * 0.017453292F), (double) (-Mth.cos(this.getYRot() * 0.017453292F)), this); // Pa
+                                    entityliving.knockback((float) level.sakuraConfig().players.knockback.sweepingEdgeKnockback, (double) Mth.sin(this.getYRot() * 0.017453292F), (double) (-Mth.cos(this.getYRot() * 0.017453292F)), this); // Sakura // Pa
                                     }
                                     // CraftBukkit end
                                 }
